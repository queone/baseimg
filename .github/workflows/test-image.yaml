name: Test Image

on:
  workflow_dispatch:
    inputs:
      image_url_path:
        description: "Specify the full image URL path"
        required: true
        type: choice
        options:
          - ghcr.io/queone/quebase
          - ghcr.io/queone/quevault
      image_tag:
        description: "Specify the tag to test (e.g., 1.0.3)"
        required: true
        type: string

permissions:
  contents: read  # Required to checkout private repo
  packages: read  # Required to pull private container images from GHCR

jobs:
  detect-architectures:
    runs-on: ubuntu-latest
    outputs:
      archs: ${{ steps.detect.outputs.archs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0  # Ensure we fetch all branches

      - name: Authenticate with GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Detect available architectures for the image
        id: detect
        run: |
          Gre='\e[1;32m' Red='\e[1;31m' Pur='\e[1;35m' Yel='\e[1;33m' Blu='\e[1;34m' Rst='\e[0m'
          ARCHS=$(.github/scripts/detect-arch.sh "${{ github.event.inputs.image_url_path }}" "${{ github.event.inputs.image_tag }}")
          echo "archs=$ARCHS" >> $GITHUB_OUTPUT
          # DEBUG OUTPUT
          printf "Image URL             : ${Yel}${{ github.event.inputs.image_url_path }}${Rst}\n"
          printf "Image Tag             : ${Yel}${{ github.event.inputs.image_tag }}${Rst}\n"
          printf "Detected Architectures: ${Yel}$ARCHS${Rst}\n"

  test-container:
    runs-on: ubuntu-latest
    needs: detect-architectures
    strategy:
      matrix:
        arch: ${{ fromJson(needs.detect-architectures.outputs.archs) }}
    container:
      image: ${{ github.event.inputs.image_url_path }}:${{ github.event.inputs.image_tag }}
      options: "--platform ${{ matrix.arch }}"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0  # Ensure we fetch all branches

      - name: Setup Go environment
        uses: actions/setup-go@v5.3.0
        with:
          go-version: '1.23.4'

      - name: Test COMMANDS
        run: |
          Gre='\e[1;32m' Red='\e[1;31m' Pur='\e[1;35m' Yel='\e[1;33m' Blu='\e[1;34m' Rst='\e[0m'
          printf "${Gre}START (${{ matrix.arch }})${Rst}\n"
          git --version || echo "git not found"
          ls -l
          cat /etc/os-release
          uname -m
          go version || echo "go not found"
          vault version || echo "vault not found"
          printf "${Red}END (${{ matrix.arch }})!${Rst}\n"
