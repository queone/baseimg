name: Build and Release Image

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Specify the new tag (leave empty for auto-increment)"
        required: false
        type: string
      dockerfile:
        description: "Select the Dockerfile to use"
        required: true
        type: choice
        options:
          - Dockerfile.base
          - Dockerfile.vault

permissions:
  contents: write
  packages: write

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.versioning.outputs.TAG }}
      image_name: ${{ steps.extract.outputs.image_name }}
    steps:

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.8.0

      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0  # Ensure we fetch all tags

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract image name from Dockerfile
        id: extract
        run: |
          IMAGE_NAME=$(.github/scripts/extract-image-name.sh ${{ github.event.inputs.dockerfile }})
          echo "Extracted image name: $IMAGE_NAME"  # Debugging log
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT

      - name: Determine new version
        id: versioning
        run: |
          NEW_TAG=$(GITHUB_TAG_NAME="${{ github.event.inputs.tag_name }}" .github/scripts/determine-version.sh)
          echo "Latest tag: ${LATEST_TAG:-none}"
          echo "New tag: $NEW_TAG"
          echo "TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "TAG=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Build the Docker image with new tag
        run: |
          echo "Building image: ghcr.io/queone/${{ env.IMAGE_NAME }}:${{ env.TAG }}"  # Debugging log
          docker build -f ${{ github.event.inputs.dockerfile }} -t ghcr.io/queone/${{ env.IMAGE_NAME }}:${{ env.TAG }} -t ghcr.io/queone/${{ env.IMAGE_NAME }}:latest .

      - name: Push the Docker images
        run: |
          docker push ghcr.io/queone/${{ env.IMAGE_NAME }}:${{ env.TAG }}
          docker push ghcr.io/queone/${{ env.IMAGE_NAME }}:latest

      - name: Create and push Git tag
        run: |
          git tag ${{ env.TAG }}
          git push origin ${{ env.TAG }}

      - name: Debug repository name
        run: |
          echo "Repository: ${{ github.repository }}"

      - name: Create GitHub Release with new tag
        run: |
          REPO="${{ github.repository }}"  # This dynamically gets the correct repo owner/name
          echo "Creating release in: $REPO"

          RESPONSE=$(curl -s -o response.json -w "%{http_code}" -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$REPO/releases" \
            -d "{\"tag_name\": \"${{ env.TAG }}\", \"name\": \"Release ${{ env.TAG }}\", \"body\": \"Auto-generated release for version ${{ env.TAG }}\", \"draft\": false, \"prerelease\": false}")

          if [[ "$RESPONSE" -ne 201 ]]; then
            echo "‚ùå Failed to create GitHub Release! Response code: $RESPONSE"
            cat response.json
            exit 1
          fi
