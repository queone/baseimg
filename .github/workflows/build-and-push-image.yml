name: Build and Push to GHCR

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: read
  packages: write
  
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build the Docker image
        run: |
          docker build -t ghcr.io/queone/cntimage:latest .

      - name: Push the Docker image
        run: |
          docker push ghcr.io/queone/cntimage:latest

      - name: Delete old images from GHCR (ubi9:*)
        run: |
          TOKEN=${{ secrets.GITHUB_TOKEN }}
          USERNAME="queone"
          REPO="ubi9"

          RESPONSE=$(curl -s -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/users/$USERNAME/packages/container/$REPO/versions")

          echo "API Response: $RESPONSE"

          IMAGES=$(echo "$RESPONSE" | jq -r 'map(select(.id)) | .[].id')

          if [[ -z "$IMAGES" ]]; then
            echo "No images found."
            exit 0
          fi

          for IMAGE_ID in $IMAGES; do
            TAGS=$(echo "$RESPONSE" | jq -r --argjson id "$IMAGE_ID" '.[] | select(.id == $id) | .metadata.container.tags | length')

            if [[ "$TAGS" -le 1 ]]; then
              echo "Skipping deletion of last tagged version: $IMAGE_ID"
              continue
            fi

            echo "Deleting image ID: $IMAGE_ID"
            curl -X DELETE -H "Authorization: Bearer $TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/users/$USERNAME/packages/container/$REPO/versions/$IMAGE_ID"
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

